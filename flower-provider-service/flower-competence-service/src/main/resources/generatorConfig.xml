<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE generatorConfiguration PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd" >
<generatorConfiguration>

    <!-- 引入 properties 配置文件 -->
    <!-- <properties resource="classpath:properties/mbg.properties"/> -->

    <!-- 数据库链接驱动包 -->
    <!-- <classPathEntry location="/Users/apple/Desktop/jar/mysql-connector-java-8.0.13.jar"/> -->

    <!--
        defaultModelType：指定生成对象的样式：
            conditional：类似hierarchical
            flat：所有内容（主键，blob）等全部生成在一个对象中
            hierarchical：主键生成一个XXKey对象(key class)，Blob等单独生成一个对象，其他简单属性在一个对象中(record class)
        targetRuntime：
            MyBatis3：默认的值，生成基于MyBatis3.x以上版本的内容，包括XXXBySample
            MyBatis3Simple：类似MyBatis3，只是不生成XXXBySample
            introspectedColumnImpl：类全限定名，用于扩展MBG
    -->
    <context id="MySqlTables" targetRuntime="MyBatis3Simple" defaultModelType="flat">

        <!-- 生成的Java文件的编码 -->
        <property name="javaFileEncoding" value="UTF-8"/>

        <!-- 格式化java代码 -->
        <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>

        <!-- 格式化XML代码 -->
        <property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>

        <!-- beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号，对于有关键字的情况下适用 -->
        <!-- <property name="beginningDelimiter" value="`"/> -->
        <!-- <property name="endingDelimiter" value="`"/> -->

        <!-- TkMapper插件 -->
        <plugin type="tk.mybatis.mapper.generator.MapperPlugin">
            <!-- <property name="mappers" value="tk.mybatis.mapper.common.Mapper,tk.mybatis.mapper.common.MySqlMapper"/> -->
            <property name="mappers" value="com.sdl.common.base.mapper.BaseMapper"/>
            <!-- caseSensitive默认false，当数据库表名区分大小写时，可以将该属性设置为true -->
            <property name="caseSensitive" value="true"/>
            <property name="lombok" value="Getter,Setter"/>
        </plugin>

        <!-- 重命名插件 -->
        <!--
        <plugin type="org.mybatis.generator.plugins.RenameExampleClassPlugin">
            <property name="searchString" value="Example$" />
            <property name="replaceString" value="Criteria" />
        </plugin>
        -->

        <!-- 为生成的Java模型类添加序列化接口 -->
        <plugin type="org.mybatis.generator.plugins.SerializablePlugin"/>

        <!-- 为生成的Java模型创建一个toString方法 -->
        <plugin type="org.mybatis.generator.plugins.ToStringPlugin"/>

        <!-- <commentGenerator> -->
        <!-- <property name="suppressDate" value="true"/> -->
        <!-- 是否去除自动生成的注释 true：是，false：否 -->
        <!-- <property name="suppressAllComments" value="true"/> -->
        <!-- </commentGenerator> -->

        <!-- jdbc数据库连接配置 -->
        <!-- <jdbcConnection driverClass="${mbg.db.driverClassName}"
                        connectionURL="${mbg.db.url}"
                        userId="${mbg.db.username}"
                        password="${mbg.db.password}"/> -->
        <jdbcConnection driverClass="com.mysql.cj.jdbc.Driver"
                        connectionURL="jdbc:mysql://182.92.217.85:3306/flower_basics_dev?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false"
                        userId="root"
                        password="Passw0rd_"/>

        <javaTypeResolver type="org.mybatis.generator.internal.types.JavaTypeResolverDefaultImpl">
            <!--
                true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型
                false：默认
                    scale>0，length>18：使用BigDecimal
                    scale=0，length[10,18]：使用Long
                    scale=0，length[5,9]：使用Integer
                    scale=0，length<5：使用Short
             -->
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>

        <javaModelGenerator targetPackage="com.sdl.comp.service.entity" targetProject="src/main/java">
            <!-- 自动为每一个生成的类创建一个构造方法，构造方法包含了所有的field；而不是使用setter -->
            <property name="constructorBased" value="false"/>
            <!-- 是否创建一个不可变的类，如果为true，那么MBG会创建一个没有setter方法的类，取而代之的是类似constructorBased的类 -->
            <property name="immutable" value="false"/>
            <!-- 是否允许子包，即targetPackage.schemaName.tableName -->
            <property name="enableSubPackages" value="false"/>
            <!-- 设置是否在getter方法中，对String类型字段调用trim()方法 -->
            <property name="trimStrings" value="true"/>
            <!-- 设置一个根对象 -->
            <!-- <property name="rootClass" value="com.sdl.common.entity.BaseEntity"/> -->
        </javaModelGenerator>

        <sqlMapGenerator targetPackage="mapper" targetProject="src/main/resources">
            <!-- 在targetPackage的基础上，根据数据库的 schema 再生成一层 package，最终生成的类放在这个 package 下，默认：false -->
            <property name="enableSubPackages" value="false"/>
        </sqlMapGenerator>

        <javaClientGenerator targetPackage="com.sdl.comp.service.mapper" targetProject="src/main/java"
                             type="XMLMAPPER">
            <!-- 在 targetPackage 的基础上，根据数据库的 schema 再生成一层 package，最终生成的类放在这个 package 下，默认：false -->
            <property name="enableSubPackages" value="false"/>
        </javaClientGenerator>

        <!--<table schema="" tableName="test_table">-->
            <!-- mysql 自增ID配置 -->
            <!-- <generatedKey column="id" sqlStatement="Mysql" identity="true"/> -->
            <!-- oracle 自增ID配置 -->
            <!--<generatedKey column="id" sqlStatement="select SEQ_{1}.nextval from dual" identity="false" type="pre"/>-->


        <!--</table>-->

        <table tableName="test_table">
            <!-- mysql 自增ID配置 -->
            <generatedKey column="id" sqlStatement="Mysql" identity="true"/>
        </table>

    </context>
</generatorConfiguration>